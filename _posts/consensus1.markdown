# 共识协议的基本思想

这篇文章介绍关于共识协议的基本知识。
对于近年来比较火的Raft共识协议，这篇文章的内容可以作为前导知识。
但需要注意的是，有些观点认为共识协议提供强一致性，这种说法是不严谨的。
关于强一致性问题，应该会有另外一篇文章来介绍。


## 1 共识问题

我们要先熟悉一个概念，叫做“达成统一意见”(Reaching agreement)，或者简单讲：达成共识。
注意，共识不是一个过程，而是一个终止时刻的状态。
在人类社会中，这个概念很好理解，它的意思就是所有人都同意一个 _观点_。
在计算机科学与分布式系统中，这个概念依然适用，只不过主体不再是人，而是变为了可以执行命令和保存状态的进程(process)，
所谓的 _观点_，则变为了可以在计算机中保存的二进制数值。

**对于计算机系统来讲，共识就是这样一个状态：对于一组进程，所有的进程都同意唯一一个值作为共识结果，且这个值必然来自于某一个进程。**
比如说，多个进程都被初始化为相同状态，这不能叫共识。
多个进程被初始化为不同状态，后来这些进程不借助任何外部操作变为了相同状态，这叫共识。
当然这只是粗略的解释，而且也没有说清楚计算机是怎样完成 _同意_ 这样的行为的，下面让我们把描述修改得略微严谨一些。


### 1.1 一个形象的例子

让我们来思考一个简单的情形来更好的理解共识问题。
假设现在有一群人，他们在聚集到一起之前互不认识，在聚集到一起之后可以根据面容相互认识并确认对方姓名，且没有重复的姓名。
他们每人都手握一个纸条，纸条上写了一个不可修改的初始整数，每个纸条上的初始值可以不相同。
这个纸条上的内容只能自己看。纸条上还可以写字，但每个纸条只能拿着的人自己写。
此外，每个纸条上还有一个额外的写字区域，叫做结果记录区，里面可以写一个整数。
任何两个人之间都可以通过直接的对话交换某些信息。
这群人最终的目标是：_经过多次的信息交换后，每个人手上的纸条里的结果记录区都写着相同的整数，且这个整数是某个人纸条上的初始值_。
假设任何两个人的对话都可以在很短时间内完成。
请问每个人该以怎样的逻辑去交换和记录信息？给出一个算法。
如果又假设任何两个人的对话都可能由于某种原因无法完成呢？

实现上述目标，有一个简单的想法，即大家都认定同一个姓名的人并记录这个人给出的值。
但问题是，如何在大家起初互不相知的情况下确定这个人呢？
一种想法是让每个人都执行下述流程：收集每个人的姓名，包括自己，直到收集完成，然后按照字母序排序，选择排序最小的那个人。
这种收集全部信息后排序的思路比较传统，该思路最大的缺陷就是需要收集全部信息。
考虑真实的计算机系统，在一个不稳定的机器与网络环境中，进程之间可能无法收集全量的信息。
也就是说，对于两个进程A和B，A对B进行询问可能永远得不到回应，B发给A的消息可能永远不会到达。
在人类社会中，人与人之间面对面交谈时发生这种情况是天方夜谈的，但计算机系统中这是必然会发生的。
这种特征也导致了共识问题的复杂，在下面的章结我会给出共识问题的形式化描述，以及一种解决共识问题的算法。


### 1.2 容错引发的思考

20世纪70年代，计算机科学家开始遇见两个相似的容错(Fault Tolerance)问题。
第一，飞机控制系统与军事系统存在单点故障的风险，这种单点故障是致命的。
比如飞机的控制器故障将导致飞机失事，工程师也无法保证一个控制器永远不会故障。
想要避免单点故障唯一的办法就是增加冗余的控制器，但如何让所有控制器像一个控制器那样工作又成了新的问题，
这就是飞机控制系统中的容错问题。
第二，数据存储系统与业务的发展要求存储服务的高可靠，然而任何一个单独的服务器都可能存在故障的可能，
再加上网络互连时存在的不稳定现象，导致单点的存储服务无法满足业务对可靠性的需求。
增加数据的冗余副本便成为了一个自然的想法，然而管理多个副本的数据并使其在故障环境中像一个单点存储服务那样工作同样时一项挑战，
这就是存储系统中的容错问题。

容错的本质是，让一个多节点系统在部分节点故障或节点通信故障的情况下依然能正常工作。
多副本系统中的容错，最大挑战在于如何判断当前系统给出的结果是唯一的？
在飞机控制系统中，某个机翼组件是控制系统的接受端，执行一个机翼动作。
如果不同的机翼控制组件收到了相互冲突的命令，同样可能会导致致命的后果，
这种状况是控制系统一定要避免的。
在多副本存储系统中，也存在同样顾虑。
想要解决这个顾虑，副本在给出结果之前需要先产生共识，这样才能保证所有副本的行为一致。

容错和共识的关系基本就是这样，容错的关键是产生共识，而共识协议则是为容错而生。


